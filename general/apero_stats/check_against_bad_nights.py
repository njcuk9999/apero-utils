#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
CODE DESCRIPTION HERE

Created on 1/12/22

@author: cook
"""
import os
from tqdm import tqdm

# =============================================================================
# Define variables
# =============================================================================

workspace = ('/data/spirou/misc/full_run_errors_211227/report/'
             'APEROL-PID-00016406414334182270-Q163_apero_processing')

errorfile = 'E_09_002_00004.log'

bad_nights = ['2018-05-16', '2018-05-17', '2018-05-21', '2018-09-17',
              '2018-10-23', '2020-03-09', '2020-06-22']

eng_nights = ['2018-04-28', '2018-04-29', '2018-04-30', '2018-05-01',
              '2018-05-19', '2018-05-20', '2018-07-12', '2018-07-13',
              '2018-07-14', '2018-07-16', '2018-07-17', '2018-07-20',
              '2018-07-27', '2018-09-20', '2018-10-24', '2018-10-29',
              '2018-10-30', '2018-11-01', '2018-11-13', '2018-11-14',
              '2018-11-16', '2018-11-26', '2018-11-27', '2019-01-12',
              '2019-02-09', '2019-02-12', '2019-02-13', '2019-02-15',
              '2019-02-20', '2019-02-21', '2019-02-22', '2019-02-24',
              '2019-04-06', '2019-04-13', '2019-04-14', '2019-04-29',
              '2019-04-30', '2019-07-07', '2019-08-23', '2019-08-24',
              '2019-08-25', '2019-08-26', '2019-09-21', '2019-09-23',
              '2019-10-10', '2019-10-11', '2019-10-30', '2019-12-06',
              '2019-12-14', '2019-12-15', '2019-12-16', '2019-12-17',
              '2019-12-18', '2019-12-19', '2019-12-20', '2020-01-22',
              '2020-01-23', '2020-01-25', '2020-02-07', '2020-02-08',
              '2020-02-10', '2020-02-11', '2020-02-12', '2020-02-13',
              '2020-02-14', '2020-03-13', '2020-03-16', '2020-03-17',
              '2020-03-18', '2020-03-19', '2020-03-25', '2020-03-26',
              '2020-03-27', '2020-03-28', '2020-03-30', '2020-03-31',
              '2020-04-01', '2020-04-02', '2020-04-04', '2020-04-05',
              '2020-04-06', '2020-04-07', '2020-04-08', '2020-04-09',
              '2020-04-10', '2020-04-11', '2020-04-13', '2020-04-14',
              '2020-04-15', '2020-04-16', '2020-04-18', '2020-04-19',
              '2020-04-21', '2020-04-22', '2020-04-23', '2020-04-24',
              '2020-04-25', '2020-04-26', '2020-04-28', '2020-04-29',
              '2020-04-30', '2020-05-01', '2020-05-02', '2020-05-04',
              '2020-05-05', '2020-05-06', '2020-07-26', '2020-08-05',
              '2020-09-24', '2020-10-02', '2020-10-27', '2020-10-28',
              '2020-10-29', '2021-03-01', '2021-03-25', '2021-03-29',
              '2021-07-23', '2021-09-16', '2021-11-14', '2021-11-15',
              '2021-12-08', '2021-12-20', '2021-12-22']

# =============================================================================
# Define functions
# =============================================================================


# =============================================================================
# Start of code
# =============================================================================
if __name__ == "__main__":


    # get file
    with open(os.path.join(workspace, errorfile), 'r') as efile:
        lines = efile.readlines()

    # get all lines starting with '# RUNSTRING =
    valid_lines = []

    for line in lines:
        if line.startswith('# RUNSTRING = '):
            valid_lines.append(line)


    # storage
    bad_lines = dict()
    eng_lines = dict()
    other_lines = []
    found_lines = []
    # find lines that have dates above
    for line in tqdm(valid_lines):

        found = False

        # loop through bad nights
        for bad_night in bad_nights:
            if bad_night in line:
                if bad_night in bad_lines:
                    bad_lines[bad_night] += 1
                else:
                    bad_lines[bad_night] = 1
                found = True

        # loop through eng nights
        for eng_night in eng_nights:
            if eng_night in line:
                if eng_night in eng_lines:
                    eng_lines[eng_night] += 1
                else:
                    eng_lines[eng_night] = 1
                found = True

        if not found:
            other_lines.append(line)
        else:
            found_lines.append(line)

    print(f'Number explained {len(found_lines)}/{len(valid_lines)}')
    print(f'Number in bad: {len(bad_lines)} / {len(bad_nights)}')
    print(f'Number in eng: {len(eng_lines)} / {len(eng_nights)}')


# =============================================================================
# End of code
# =============================================================================
